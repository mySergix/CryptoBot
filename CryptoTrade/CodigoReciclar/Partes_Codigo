#Mostrar por pantalla el grafico de velas con el intervalo de fechas y la frecuencia seleccionados
  def display_candles_chart(self, data):
      fig = plot.Figure(data = [plot.Candlestick(x = data["start"],
                        open = data["open"],
                        high = data["high"],
                        low = data["low"],
                        close = data["close"])])

      fig.update_layout(
          title = "Gráfica {}, Frecuencia {}".format(self.CoinPair,self.Frequency),
          yaxis_title="{}".format(self.CoinPair),
          font_family="Arial",
          font_color="black",
          title_font_family="Arial",
          title_font_color="black",
          legend_title_font_color="black"
      )

      fig.show()


      #####IMPORTANTE MIRAR EL USO DE LAS COLUMNAS 10 Y 9 DE LOS DATOS DE BINANCE
        #BTCUSDT
        # 10 -> Taker buy quote asset volume -> total de monedas (crypto) que ha recibido el comprador)  (BTC)
        # 9 -> Taker buy quote asset volume (USDT)
        # OPCION PARA CALCULAR EL MAKER BUY
        def data_filter(self, data):
            df = pd.DataFrame(data)
            df = df.drop([6, 7, 9, 10, 11], axis=1)

            columns = ["time", "open", "high", "low", "close", "volume", "trades"]
            df.columns = columns

            for i in columns:
                df[i] = df[i].astype(float)

            df["start"] = pd.to_datetime(df["time"]*1000000) #Pasar los milisegundos a horario UTC
            #df["MediaMovil_R"] = np.nan #Media movil rapida (llenar columna) CAMBIAR, PONER EN OTRA FUNCION
            #df["MediaMovil_L"] = np.nan #Media movil lenta (llenar columna) CAMBIAR, PONER EN OTRA FUNCION
            return df

        ##### NUEVA FUNCION AÑADIR COLUMNA PARA CADA INDICADOR #####

        #Actualizar a los ultimos datos registrados por Binance
        def update_data(self):
            new_candle = self.binance_client.get_klines(symbol=self.CoinPair, interval=self.Frequency, limit=1)
            # limit = 1 -> se descarga los datos de la ultima vela
            # interval -> intervalo de esa vela (frecuencia)
            self.df.drop(index = 0, inplace = True) #Quitamos la primera vela de todas y movemos el resto 1 indice hacia abajo
            self.df = self.df.append(self.data_filter(new_candle), ignore_index=True)
            self.df.index = list(range(self.DataElements))

        #Ejecucion de las ordenes de compra o venta del bot
        #####PONER COMO INPUT EL TYPE DE ORDEN (MARKET, LIMIT)
        def open_order(self, op_type, operacion, cantidad):
            try:
                self.opened_order = self.binance_client.create_order(
                    symbol = self.CoinPair,
                    side = operacion,
                    type = op_type,
                    quantity = cantidad
                )
            except BinanceAPIException as e:
                print(e)

        # Registro de la actividad del bot (para escribir las ordenes en un txt)

        #### FUNCION PARA ESCRIBIR COSAS EN TXT DE FORMA GENERICA  (inputs nombre archivo con string, mas strings a escribir) ####
        #### TRABAJO CHINOFARMER GUILLE ####
        def registro_orden(self, tipo_orden_ejecutada, comision, moneda_comision, PRECIO = "NONE"):
            f1 = open("Log_{}_{}_BOT.txt".format(self.CoinPair, self.Frequency), "a+")
            if os.stat("Log_{}_{}_BOT.txt".format(self.CoinPair, self.Frequency)).st_size == 0:
                f1.write("FECHA \t ORDEN \t PRECIO \t CANTIDAD \t COMISIÓN \t MONEDA COMISIÓN\n")

            f1.write("{}\t{}\t{}\t{}\t{}\t{}\n".format(str(dt.datetime.now()), tipo_orden_ejecutada, str(PRECIO),
                                                           str(self.cantidad_orden), comision, moneda_comision))
            f1.close()

        #Funcion para el registro de las monedas en la cartera
        #def registro_cartera(self):
          #  if os.path.exists("Cartera_{}_BOT.txt".format(self.Crypto)):
              #  file = open("Cartera_{}_BOT.txt".format(self.Crypto);"a+")
              #  file.write("{}\t{}\t{}\n".format(dt.datetime.now(), self.Crypto, self.Fiat))


        # Funcion para notificar que se acaba de fillear una orden
        def notify_order(self):
            if self.order_status == "FILLED":
                mean_prize_operation = 0
                comisiones_pagadas = 0
                for i in self.market_order["fills"]: #Es necesario calcular el mean de la orden
                    comisiones_pagadas += float(self.market_order["commission"])
                    mean_prize_operation += float(i["price"])*float(i["qty"])
                mean_prize_operation = mean_prize_operation/self.cantidad_orden
                self.registro_orden("FILLED", comisiones_pagadas, self.market_order["commissionAsset"], mean_prize_operation)
            else:
                self.registro_orden(self.order_status)

        #Funcion para descargar los datos iniciales necesarios y preparar el bot para funcionar
        def prepare_bot(self):
            self.get_initial_candle_data()
            print("Preparando bot para operar\n")
            self.display_pair()
            self.display_frequency()

        # Funcion para activar y mantener ejecutándose al bot
        def run_bot(self):

            self.update_data() #Actualizacion de los datos hasta la ultima vela disponible
            start_time = self.df.start.iloc[-1] + dt.timedelta(minutes = self.CandleMinutes) #Se empieza a operar JUSTO cuando acaba una vela y empieza la siguiente

            while dt.datetime.now() < start_time:
                pass
                time.sleep(2) #Esperamos 2 segundos para asegurarnos de que la siguiente vela esta disponible

            while self.RUN:
                #Mientras las variable RUN sea True, el bot se seguirá ejecutando, cuando deje de serlo (False), se parará

                tiempo_inicio = time.time() #Calculamos el tiempo inicial (se empieza a operar en ese tiempo)
                #self.single_operation() #Se hacen las operaciones
                tiempo_operacion = time.time() - tiempo_inicio #Tiempo de las oepraciones ejecutadas en single_operation()
                time.sleep(self.CandleSeconds - tiempo_operacion) #Tiempo hasta seguir con la siguiente vela, de esta forma no se repiten las velas


        ##### CREAR UNA CLASE COMPLETA PARA DETERMINAR SI HAY QUE COMPRAR O VENDER (RETURN BOOL) ####



        # Funcion que ejecuta todas las funcionalidades del bot
        # Single operation function
            #Update Data
            #Analizar los datos, comprobar indicadores
            #Determinar si hay que comprar (en caso de no tener nada comprado) o vender (en caso de tener algo comprado)
            #Actualizar los datos sobre crypto y fiat en la cartera (pedir infor a binance)

            #CASO 1 (IF) (ORDEN DE COMPRA ABIERTA, HAY CRYPTO EN CARTERA)
                #SE DETERMINA SI LOS INDICADORES DICEN VENTA
                #SI NO HAY VENTA SE PASA, SE VUELVE AL INICIO A ACTUALIZAR DATOS Y CALCULAR NUEVOS INDICADORES

            #CASO 2 (IF) (NO HAY ORDENES ABIERTAS, NO HAY CRYPTO EN CARTERA, SOLO FIAT)
                #SE DETERMINA SI LOS INDICAODRES DICEN COMPRA (POR AHORA NO SHORTS)
                    #SI DICEN COMPRA -> SE COMPRA, SE REGISTRA EL TRADE, Y VUELTA A EMPEZAR
                    #SI NO DICE COMPRA -> SE VUELVE AL INICIO A ESPERAR A LA SIGUIENTE VELA
